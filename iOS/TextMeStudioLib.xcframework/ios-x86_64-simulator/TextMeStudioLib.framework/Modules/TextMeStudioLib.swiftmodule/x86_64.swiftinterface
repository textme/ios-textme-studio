// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TextMeStudioLib
import AdSupport
import Alamofire
import AppTrackingTransparency
import Foundation
import Security
import StoreKit
import Swift
@_exported import TextMeStudioLib
import UIKit
public struct EventLoggerService {
  public func logAction(_ action: TextMeStudioLib.UserActions)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InAppService : ObjectiveC.NSObject {
  @objc deinit
}
extension InAppService : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, restoreCompletedTransactionsFailedWithError error: Swift.Error)
  @objc dynamic public func paymentQueueRestoreCompletedTransactionsFinished(_ queue: StoreKit.SKPaymentQueue)
}
extension InAppService : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
}
extension InAppService : StoreKit.SKRequestDelegate {
  @objc dynamic public func requestDidFinish(_ request: StoreKit.SKRequest)
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: Swift.Error)
}
@_hasMissingDesignatedInitializers public class TextMeStudio {
  public static let shared: TextMeStudioLib.TextMeStudio
  public var eventLogger: TextMeStudioLib.EventLoggerService
  public var inapp: TextMeStudioLib.InAppService
  public func initialize(token sdkToken: Swift.String)
  @objc deinit
}
public enum UserActions {
  public struct Keys {
    public struct InApp {
    }
    public struct Application {
    }
  }
  case applicationInstalled
  case applicationStarted
  case applicationStoped
  case inAppPurchaseSucceed(price: Foundation.NSNumber, currency: Swift.String, identifier: Swift.String, transaction: [Swift.String : Any]?)
  case inAppStartedApp(price: Foundation.NSNumber, currency: Swift.String, identifier: Swift.String)
  case inAppProductList(inAppProducts: [Swift.String : [Swift.String : Swift.AnyObject]])
  case paidTransaction(price: Foundation.NSNumber, identifier: Swift.String, receipt: Foundation.Data)
}
extension UserActions : Swift.Equatable {
  public static func == (lhs: TextMeStudioLib.UserActions, rhs: TextMeStudioLib.UserActions) -> Swift.Bool
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, unrecognized
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: TextMeStudioLib.Model {
    get
  }
}
public struct TMSLog {
  public static func print(_ items: Any..., separator: Swift.String = " ", terminator: Swift.String = "\n")
}
extension TextMeStudioLib.Model : Swift.Equatable {}
extension TextMeStudioLib.Model : Swift.Hashable {}
extension TextMeStudioLib.Model : Swift.RawRepresentable {}
