// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TextMeStudioLib
import AdSupport
import AppTrackingTransparency
import Foundation
import GoogleMobileAds
import SafariServices
import Security
import StoreKit
import Swift
@_exported import TextMeStudioLib
import UIKit
import _Concurrency
@objc public protocol TMSInAppServiceDelegate {
  @objc optional func inAppServiceLoading()
  @objc optional func inAppServiceLoaded()
  @objc optional func receiptLoading()
  @objc optional func receiptLoaded()
  @objc optional func purchaseSucceeded(_ product: Foundation.NSDictionary)
  @objc optional func subscriptionExpired()
  @objc optional func trialPeriod() -> Swift.Int
}
@objc public protocol TMSInAppServiceProtocol {
  @objc var inAppLoading: Swift.Bool { get }
  @objc var receiptLoading: Swift.Bool { get }
  @objc func productInfo(productIdentifier: Swift.String) -> [Swift.String : Any]?
  @objc func hasHactiveSubscription(force: Swift.Bool) -> Swift.Bool
  @objc func hasHactiveSubscription() -> Swift.Bool
  @objc func purchase(product: [Swift.String : Swift.AnyObject], completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  @objc func restorePurchases(completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  @objc func requestProducts()
  @objc weak var delegate: TextMeStudioLib.TMSInAppServiceDelegate? { get set }
}
public enum ApplicationThemeColorName : Swift.String {
  public typealias RawValue = Swift.String
  case background
  case border
  case darkMain
  case intermediateBackground
  case intermediateDarkMain
  case lightMain
  case main
  case negation
  case specialTableHeader
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIColor {
  public static func UIColorFromRGB(_ rgbValue: Swift.UInt32) -> UIKit.UIColor
  public static func fromApplicationTheme(name: TextMeStudioLib.ApplicationThemeColorName) -> UIKit.UIColor
}
public typealias GADBannerAdLoadCompletionHandler = (GoogleMobileAds.GADBannerView?, Swift.Error?) -> ()
@_hasMissingDesignatedInitializers public class TMSAdService {
  public class func loadBanner(adSize: GoogleMobileAds.GADAdSize, origin: CoreGraphics.CGPoint, completionHandler: @escaping TextMeStudioLib.GADBannerAdLoadCompletionHandler)
  public class func loadInterstitial(withAdUnitID adUnitID: Swift.String, completionHandler: @escaping GoogleMobileAds.GADInterstitialAdLoadCompletionHandler)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TMSRouter {
  public static var shared: TextMeStudioLib.TMSRouter {
    get
  }
  public func presentInApp(_ rootViewController: UIKit.UIViewController, modalPresentationStyle: UIKit.UIModalPresentationStyle = .automatic, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public func inAppViewController() -> UIKit.UIViewController?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RemoteConfig {
  public typealias DictionaryType = Swift.Dictionary<Swift.String, Any>
  @objc deinit
}
extension TextMeStudioLib.RemoteConfig : Swift.Collection {
  public typealias Index = TextMeStudioLib.RemoteConfig.DictionaryType.Index
  public typealias Element = TextMeStudioLib.RemoteConfig.DictionaryType.Element
  public var startIndex: TextMeStudioLib.RemoteConfig.Index {
    get
  }
  public var endIndex: TextMeStudioLib.RemoteConfig.Index {
    get
  }
  public subscript(index: TextMeStudioLib.RemoteConfig.Index) -> Swift.IndexingIterator<TextMeStudioLib.RemoteConfig>.Element {
    get
  }
  public func index(after i: TextMeStudioLib.RemoteConfig.Index) -> TextMeStudioLib.RemoteConfig.Index
  public subscript(key: Swift.String) -> Any? {
    get
    set
  }
  public typealias Indices = Swift.DefaultIndices<TextMeStudioLib.RemoteConfig>
  public typealias Iterator = Swift.IndexingIterator<TextMeStudioLib.RemoteConfig>
  public typealias SubSequence = Swift.Slice<TextMeStudioLib.RemoteConfig>
}
extension TextMeStudioLib.RemoteConfig {
  public var privacyPolicyURL: Foundation.URL? {
    get
  }
  public var termsAndConditionsURL: Foundation.URL? {
    get
  }
  public func getLocalizedText(from key: Swift.String) -> Swift.String?
}
public struct EventLoggerService {
}
extension Foundation.NSNotification.Name {
  public static let appConfigDidFetch: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers public class TextMeStudio : TextMeStudioLib.TextMeStudioProtocol {
  public static var shared: TextMeStudioLib.TextMeStudioProtocol {
    get
  }
  public var inApp: TextMeStudioLib.TMSInAppServiceProtocol?
  public var remoteConfig: TextMeStudioLib.RemoteConfig {
    get
  }
  public func initialize(token sdkToken: Swift.String, completion: @escaping (Swift.Result<TextMeStudioLib.RemoteConfig, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension TextMeStudioLib.TextMeStudio {
  public func log(_ eventName: Swift.String)
  public func log(_ eventName: Swift.String, values: [Swift.String : Any]?)
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: TextMeStudioLib.Model {
    get
  }
}
public protocol TextMeStudioProtocol {
  static var shared: TextMeStudioLib.TextMeStudioProtocol { get }
  var inApp: TextMeStudioLib.TMSInAppServiceProtocol? { get }
  var remoteConfig: TextMeStudioLib.RemoteConfig { get }
  func initialize(token sdkToken: Swift.String, completion: @escaping (Swift.Result<TextMeStudioLib.RemoteConfig, Swift.Error>) -> Swift.Void)
  func log(_ eventName: Swift.String)
  func log(_ eventName: Swift.String, values: [Swift.String : Any]?)
}
extension Foundation.NSNotification.Name {
  public static let TMSViewDidDisappear: Foundation.NSNotification.Name
  public static let TMSViewWillDisappear: Foundation.NSNotification.Name
}
extension TextMeStudioLib.ApplicationThemeColorName : Swift.Equatable {}
extension TextMeStudioLib.ApplicationThemeColorName : Swift.Hashable {}
extension TextMeStudioLib.ApplicationThemeColorName : Swift.RawRepresentable {}
extension TextMeStudioLib.Model : Swift.Equatable {}
extension TextMeStudioLib.Model : Swift.Hashable {}
extension TextMeStudioLib.Model : Swift.RawRepresentable {}
